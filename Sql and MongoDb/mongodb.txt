##1
db.createCollection("customers");
db.customers.insertOne({
    id: 1,
    name: "John Doe",
    email: "john@example.com",
    address: "123 Main St",
    phone_number: "123-456-7890"
});

##2
// Insert five documents into the customers collection
db.customers.insertMany([
    {
        id: 1,
        name: "Alice",
        email: "alice@example.com",
        address: "123 Apple St",
        phone_number: "111-111-1111"
    },
    {
        id: 2,
        name: "Bob",
        email: "bob@example.com",
        address: "456 Banana St",
        phone_number: "222-222-2222"
    },
    {
        id: 3,
        name: "Charlie",
        email: "charlie@example.com",
        address: "789 Cherry St",
        phone_number: "333-333-3333"
    },
    {
        id: 4,
        name: "David",
        email: "david@example.com",
        address: "987 Grape St",
        phone_number: "444-444-4444"
    },
    {
        id: 5,
        name: "Eve",
        email: "eve@example.com",
        address: "654 Orange St",
        phone_number: "555-555-5555"
    }
]);

##3
db.customers.find({});

##4
db.customers.find({}, { name: 1, email: 1, _id: 0 });

##5
db.customers.findOne({ id: 3 });

##6
db.customers.find({ name: /^A/ });

##7
db.customers.find().sort({ name: -1 });

##8
db.customers.updateOne({ id: 4 }, { $set: { address: 'New Address' } });

##9
db.customers.find().sort({ id: 1 }).limit(3);

##10
db.customers.deleteOne({ id: 2 });

##11
db.customers.countDocuments({});

##12
db.customers.find().sort({ id: 1 }).skip(2);

##13
db.customers.find({
    $and: [
        { id: { $gt: 2 } },
        { name: /^B/ }
    ]
});

##14
db.customers.find({
    $or: [
        { id: { $lt: 3 } },
        { name: /s$/ }
    ]
});

##15
db.customers.find({
    $or: [
        { phone_number: null },
        { phone_number: { $exists: false } }
    ]
});



##################Set2#############
##16
db.restaurants.insertOne({
    id: 1,
    name: "Restaurant A",
    cuisine: "Italian",
    address: "123 Main St",
    phone_number: "123-456-7890"
});

##17
db.restaurants.insertMany([
    {
        id: 1,
        name: "Restaurant A",
        cuisine: "Italian",
        address: "123 Main St",
        phone_number: "111-111-1111"
    },
    {
        id: 2,
        name: "Restaurant B",
        cuisine: "Mexican",
        address: "456 Elm St",
        phone_number: "222-222-2222"
    },
    {
        id: 3,
        name: "Restaurant C",
        cuisine: "Chinese",
        address: "789 Oak St",
        phone_number: "333-333-3333"
    },
    {
        id: 4,
        name: "Restaurant D",
        cuisine: "Indian",
        address: "987 Maple St",
        phone_number: "444-444-4444"
    },
    {
        id: 5,
        name: "Restaurant E",
        cuisine: "Japanese",
        address: "654 Pine St",
        phone_number: "555-555-5555"
    }
]);

##18
db.restaurants.find().sort({ average_rating: -1 });

##19
db.restaurants.find({
    delivery_available: true,
    average_rating: { $gt: 4 }
});

##20
db.restaurants.find({
    $or: [
        { cuisine_type: null },
        { cuisine_type: { $exists: false } }
    ]
});

##21
db.restaurants.countDocuments({ delivery_available: true });

##22
db.restaurants.find({ location: /New York/ });

##23
db.restaurants.aggregate([
    {
        $group: {
            _id: null,
            avg_rating: { $avg: "$average_rating" }
        }
    }
]);

##24    
db.restaurants.find().sort({ average_rating: -1 }).limit(5);

##25 
db.restaurants.deleteOne({ id: 3 });

########################set3################

##26
db.rides.insertOne({
    id: 1,
    driver: "John Doe",
    passenger: "Alice Smith",
    fare: 25.50,
    start_time: ISODate("2023-08-11T10:00:00Z")
});

##27
db.rides.insertMany([
    {
        id: 1,
        driver: "John Doe",
        passenger: "Alice Smith",
        fare: 25.50,
        start_time: ISODate("2023-08-11T10:00:00Z")
    },
    {
        id: 2,
        driver: "Jane Smith",
        passenger: "Bob Johnson",
        fare: 18.75,
        start_time: ISODate("2023-08-11T11:30:00Z")
    },
    {
        id: 3,
        driver: "David Brown",
        passenger: "Emily White",
        fare: 30.00,
        start_time: ISODate("2023-08-11T12:15:00Z")
    },
    {
        id: 4,
        driver: "Michael Green",
        passenger: "Olivia Davis",
        fare: 22.25,
        start_time: ISODate("2023-08-11T13:45:00Z")
    },
    {
        id: 5,
        driver: "Sophia Wilson",
        passenger: "Liam Harris",
        fare: 19.50,
        start_time: ISODate("2023-08-11T14:30:00Z")
    }
]);

##28
db.rides.find().sort({ fare: -1 });

##29
db.rides.aggregate([
    {
        $group: {
            _id: null,
            total_distance: { $sum: "$distance" },
            total_fare: { $sum: "$fare" }
        }
    }
]);

##30
db.rides.aggregate([
    {
        $group: {
            _id: null,
            avg_ride_time: { $avg: "$ride_time" }
        }
    }
]);

##31
db.rides.find({
    $or: [
        { start_location: /Downtown/ },
        { end_location: /Downtown/ }
    ]
});

##32
db.rides.countDocuments({ driver_id: your_driver_id });

##33
db.rides.updateOne({ id: 4 }, { $set: { fare: new_fare } });

##34
db.rides.aggregate([
    {
        $group: {
            _id: "$driver_id",
            total_fare: { $sum: "$fare" }
        }
    }
]);

##35
db.rides.deleteOne({ id: 2 });

################################set4

##36
 highest fare
var maxFare = db.rides.find().sort({ fare: -1 }).limit(1)[0].fare;
var highestFareRide = db.rides.find({ fare: maxFare });
 lowest fare
var minFare = db.rides.find().sort({ fare: 1 }).limit(1)[0].fare;
var lowestFareRide = db.rides.find({ fare: minFare });

##37
db.rides.aggregate([
    {
        $group: {
            _id: "$driver_id",
            avg_fare: { $avg: "$fare" },
            avg_distance: { $avg: "$distance" }
        }
    }
]);

##38
db.rides.aggregate([
    {
        $group: {
            _id: "$driver_id",
            ride_count: { $sum: 1 }
        }
    },
    {
        $match: { ride_count: { $gt: 5 } }
    }
]);

##39
var maxFare = db.rides.find().sort({ fare: -1 }).limit(1)[0].fare;
var highestFareDriverId = db.rides.find({ fare: maxFare })[0].driver_id;
var driverWithHighestFare = db.drivers.findOne({ driver_id: highestFareDriverId }).name;

##40
db.rides.aggregate([
    {
        $group: {
            _id: "$driver_id",
            total_earnings: { $sum: "$fare" }
        }
    },
    {
        $sort: { total_earnings: -1 }
    },
    {
        $limit: 3
    }
]);

##41
var sevenDaysAgo = new Date(new Date() - 7 * 24 * 60 * 60 * 1000);
db.rides.find({ ride_date: { $gte: sevenDaysAgo } });

##42
db.rides.find({ end_location: null });


##43
db.rides.aggregate([
    {
        $addFields: {
            fare_per_mile: { $divide: ["$fare", "$distance"] }
        }
    },
    {
        $sort: { fare_per_mile: -1 }
    }
]);


##44
db.rides.aggregate([
    {
        $lookup: {
            from: "drivers",
            localField: "driver_id",
            foreignField: "driver_id",
            as: "driver"
        }
    },
    {
        $unwind: "$driver"
    },
    {
        $lookup: {
            from: "passengers",
            localField: "passenger_id",
            foreignField: "passenger_id",
            as: "passenger"
        }
    },
    {
        $unwind: "$passenger"
    },
    {
        $project: {
            _id: 0,
            id: 1,
            driver_name: "$driver.name",
            passenger_name: "$passenger.name"
        }
    }
]);


##45
db.rides.updateMany({}, { $set: { tip: null } });


